(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{109:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return l})),a.d(t,"toc",(function(){return c})),a.d(t,"default",(function(){return b}));var n=a(3),r=a(7),i=(a(0),a(118)),o={id:"mbeanserver",title:"A simple MBean Server Facade"},l={unversionedId:"jmx/mbeanserver",id:"jmx/mbeanserver",isDocsHomePage:!1,title:"A simple MBean Server Facade",description:"This service is a small wrapper around the platform MBean server within a JVM. The use case is to",source:"@site/docs/jmx/MBeanServerFacade.md",slug:"/jmx/mbeanserver",permalink:"/blended-zio/docs/jmx/mbeanserver",version:"current",sidebar:"someSidebar",previous:{title:"Blended ZIO JMX",permalink:"/blended-zio/docs/jmx/index"},next:{title:"MBean Publisher",permalink:"/blended-zio/docs/jmx/mbeanpublisher"}},c=[{value:"Querying for MBean Names",id:"querying-for-mbean-names",children:[]},{value:"Retrieving MBean information",id:"retrieving-mbean-information",children:[{value:"Representation of an entire MBean Info",id:"representation-of-an-entire-mbean-info",children:[]}]}],s={toc:c};function b(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"This service is a small wrapper around the platform MBean server within a JVM. The use case is to\nhave a server side component which can query for the names within the MBeanServer for a given pattern\nand to retrieve the MBean Information for a given object name. All JMX specific data shall be mapped\nto appropriate classes, so that the data can be used later on with a simple read-only JMX REST service."),Object(i.b)("p",null,"This leads to the following, simple interface definition:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-scala",metastring:'title="Service Definition"',title:'"Service','Definition"':!0}),"  trait Service {\n\n    /**\n     * Retrieve the information for a MBean by it's object name. Any JMX related information will be\n     * passed to the error channel without modification. If successful, A [[JmxBeanInfo]] will be\n     * returned.\n     */\n    def mbeanInfo(objName: JmxObjectName): ZIO[Any, Throwable, JmxBeanInfo]\n\n    /**\n     * Retrieve the list of all MBeanNames known to the underlying MBean Server.\n     * Any JMX exception that might occur will be passed onwards in the error\n     * channel. If successful, a list of [[JmxObjectName]]s will be returned.\n     */\n    def allMbeanNames(): ZIO[Any, Throwable, List[JmxObjectName]] = mbeanNames(None)\n\n    /**\n     * Retrieve the list of all object names know to the underlying MBean Server.\n     * Any JMX exception that might occur will be passed onwards in the error\n     * channel. If successful, a list of [[JmxObjectName]]s will be returned.\n     * @param objName If non-empty, the result will contain all object names that\n     *                are in the same JMX domain and have all properties set within\n     *                the parameter as additional name properties.\n     *                If empty, no filtering will be applied.\n     */\n    def mbeanNames(objName: Option[JmxObjectName]): ZIO[Any, Throwable, List[JmxObjectName]]\n  }\n")),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Even though the interface is defined without any environment restrictions, the actual ",Object(i.b)("inlineCode",{parentName:"p"},"live")," service requires that\na ",Object(i.b)("inlineCode",{parentName:"p"},"Logging")," service is available. We have decided to push the requirement for a ",Object(i.b)("inlineCode",{parentName:"p"},"Logging")," service into the instantiation\nof the ",Object(i.b)("inlineCode",{parentName:"p"},"live")," service as we might come up with ",Object(i.b)("inlineCode",{parentName:"p"},"test")," instances at some point that should just mock up the interface and\ndoes not require any logging at all."),Object(i.b)("p",{parentName:"div"},"We will use the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://zio.github.io/zio-logging/"}),"zio-logging")," API to perform the actual logging. See\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/blog/zio-logging"}),"this post")," for more details on injecting different logging back-ends into the\n",Object(i.b)("inlineCode",{parentName:"p"},"live")," service instance."))),Object(i.b)("h2",{id:"querying-for-mbean-names"},"Querying for MBean Names"),Object(i.b)("p",null,"To query for a set of MBean names with an optional is fairly straight forward wrapper around the original JMX API.\nWe just have to translate from the case class we want to use in our API to a JMX search pattern and call the API."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-scala"}),'  def mbeanNames(objName: Option[JmxObjectName]): ZIO[Logging, Throwable, List[JmxObjectName]] = for {\n    pattern <- optionalPattern(objName)\n    _       <- doLog(LogLevel.Info)(s"Querying object names with [$pattern]")\n    names   <- queryNames(pattern)\n    res      = names.map(JmxObjectName.fromObjectName)\n  } yield res\n')),Object(i.b)("p",null,"In order to make the code a bit more readable, we encapsulate the translation within some helper methods abstracting\nover the case that the pattern may be optional. It might be that a single helper method to translate the pattern\nwould have been sufficient, but in this case it seemed to improve the code's readability to have two helper methods."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"queryNames")," method performs the actual JMX call and translates the resulting Java object into a ",Object(i.b)("inlineCode",{parentName:"p"},"List")," of\n",Object(i.b)("inlineCode",{parentName:"p"},"JmxObjectName")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-scala"}),'  // Helper method to query the MBean Server for existing MBean names. If a pattern is given this will be used\n  // as a search pattern, otherwise all names will be returned\n  private def queryNames(pattern: Option[ObjectName]): ZIO[Any, Throwable, List[ObjectName]] = ZIO.effect {\n    val names: mutable.ListBuffer[ObjectName] = mutable.ListBuffer.empty[ObjectName]\n    svr.queryNames(pattern.orNull, null).forEach(n => names.append(n))\n    names.toList\n  }\n\n  // Helper method create an optional pattern\n  private def optionalPattern(name: Option[JmxObjectName]): ZIO[Any, Throwable, Option[ObjectName]] = name match {\n    case None    => ZIO.none\n    case Some(n) => toPattern(n).map(Some(_))\n  }\n\n  // helper method to create a JMX search pattern from a given object name\n  private def toPattern(name: JmxObjectName): ZIO[Any, Throwable, ObjectName] =\n    ZIO.effect {\n      val props = name.sortedProps\n      new ObjectName(s"${name.domain}:${props.mkString(",")},*")\n    }\n\n')),Object(i.b)("h2",{id:"retrieving-mbean-information"},"Retrieving MBean information"),Object(i.b)("p",null,"The complicated part retrieving MBean information is to translate the attributes within the MBean information to an actual\ncase class. We assume that the MBeans do have properties which are allowed for\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://docs.oracle.com/cd/E19206-01/816-4178/6madjde4v/index.html"}),"OpenMBeans"),"."),Object(i.b)("p",null,"If we encounter an attribute that is not valid as an attribute in the sense of the Open MBean specification, we will ignore\nthat attribute in our mapping rather than throw an exception. As a result, some attributes ",Object(i.b)("em",{parentName:"p"},"may")," be missing for certain\nMBean Info objects."),Object(i.b)("p",null,"The mapping between attributes and their case class representation happens within the ",Object(i.b)("inlineCode",{parentName:"p"},"JmxAttributeCompanion")," object. For the\nsimple types this is straight forward:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-scala"}),"          case _: Unit                  => ZIO.effectTotal(UnitAttributeValue())\n          case s: String                => ZIO.effectTotal(StringAttributeValue(s))\n          case i: java.lang.Integer     => ZIO.effectTotal(IntAttributeValue(i))\n          case l: java.lang.Long        => ZIO.effectTotal(LongAttributeValue(l))\n          case b: java.lang.Boolean     => ZIO.effectTotal(BooleanAttributeValue(b))\n          case b: java.lang.Byte        => ZIO.effectTotal(ByteAttributeValue(b))\n          case s: java.lang.Short       => ZIO.effectTotal(ShortAttributeValue(s))\n          case f: java.lang.Float       => ZIO.effectTotal(FloatAttributeValue(f))\n          case d: java.lang.Double      => ZIO.effectTotal(DoubleAttributeValue(d))\n          case bi: java.math.BigInteger => ZIO.effectTotal(BigIntegerAtrributeValue(bi))\n          case bd: java.math.BigDecimal => ZIO.effectTotal(BigDecimalAtrributeValue(bd))\n")),Object(i.b)("p",null,"To map the complex data we will rely on the ZIO ",Object(i.b)("inlineCode",{parentName:"p"},"collectPar")," operator:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-scala"}),"          case t: TabularData =>\n            for {\n              values <- ZIO.collectPar(t.values().asScala)(v => make(v).mapError(t => Option(t)))\n            } yield TabularAttributeValue(values.toList)\n\n          case cd: CompositeData =>\n            for {\n              attrs <- ZIO.collectPar(cd.getCompositeType().keySet().asScala.toList) { k =>\n                         ZIO.tupled(ZIO.succeed(k), make(cd.get(k))).mapError(t => Option(t))\n                       }\n            } yield CompositeAttributeValue(attrs.toMap)\n")),Object(i.b)("p",null,"Note, that within ",Object(i.b)("inlineCode",{parentName:"p"},"JmxAttributeCompanion")," the overall signature is"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-scala"}),"def make(v: Any): ZIO[Any, IllegalArgumentException, AttributeValue[_]]\n")),Object(i.b)("p",null,"This means that the error handling is in the responsibility of the user of the ",Object(i.b)("inlineCode",{parentName:"p"},"make")," effect."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-scala"}),"  // Helper method to create a single JmxAttribute\n  private def mapAttribute(\n    on: ObjectName,\n    info: MBeanAttributeInfo\n  ): ZIO[Any, Nothing, Map[String, AttributeValue[_]]] = (for {\n    attr <- ZIO.fromTry(Try {\n              svr.getAttribute(on, info.getName)\n            })\n    av   <- JmxAttributeCompanion.make(attr)\n  } yield (Map(info.getName -> av))).orElse(ZIO.succeed(Map.empty[String, AttributeValue[_]]))\n")),Object(i.b)("p",null,"Here, the ",Object(i.b)("inlineCode",{parentName:"p"},"orElse")," operator will handle the error by just ignoring the attribute that was faulty."),Object(i.b)("h3",{id:"representation-of-an-entire-mbean-info"},"Representation of an entire MBean Info"),Object(i.b)("p",null,"The entire MBean Info object contains the ",Object(i.b)("inlineCode",{parentName:"p"},"JmxObjectName")," it belongs to and a Map of attribute names to their corresponding values.\nIn other words, the attributes of a MBean Info can be represented by an instance of ",Object(i.b)("inlineCode",{parentName:"p"},"CompositeAttributeValue"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-scala"}),"final case class JmxBeanInfo(\n  objName: JmxObjectName,\n  attributes: CompositeAttributeValue\n)\n")))}b.isMDXComponent=!0},118:function(e,t,a){"use strict";a.d(t,"a",(function(){return m})),a.d(t,"b",(function(){return d}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=r.a.createContext({}),b=function(e){var t=r.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=b(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),m=b(a),u=n,d=m["".concat(o,".").concat(u)]||m[u]||p[u]||i;return a?r.a.createElement(d,l(l({ref:t},s),{},{components:a})):r.a.createElement(d,l({ref:t},s))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var s=2;s<i;s++)o[s]=a[s];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"}}]);