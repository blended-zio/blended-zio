(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{104:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return b}));var a=n(3),o=n(7),i=(n(0),n(113)),r={slug:"zio-streams-jms",title:"ZIO Streams and JMS",tags:["ZIO","Streams","JMS"],author:"Andreas Gies",author_url:"https://github.com/atooni"},s={permalink:"/blended-zio/blog/zio-streams-jms",source:"@site/blog/2020-10-27-ZIOJms.md",description:"In this article we are going to explore a bit of the ZIO streams API and how it can be used to talk to a JMS broker. The ZIO web site and awesome-zio have a lot of very good articles and talks on ZIO streams covering the basics, so I won't repeat those here.",date:"2020-10-27T00:00:00.000Z",tags:[{label:"ZIO",permalink:"/blended-zio/blog/tags/zio"},{label:"Streams",permalink:"/blended-zio/blog/tags/streams"},{label:"JMS",permalink:"/blended-zio/blog/tags/jms"}],title:"ZIO Streams and JMS",truncated:!0,prevItem:{title:"Autorecovery for (JMS) Streams",permalink:"/blended-zio/blog/zio-streams-autorecover"},nextItem:{title:"Use ZIO Logging",permalink:"/blended-zio/blog/zio-logging"}},c=[{value:"What we want to achieve",id:"what-we-want-to-achieve",children:[]},{value:"Constructing the Environment",id:"constructing-the-environment",children:[]},{value:"Sending messages",id:"sending-messages",children:[]},{value:"Receiving messages",id:"receiving-messages",children:[]},{value:"Next steps",id:"next-steps",children:[]},{value:"Conclusion",id:"conclusion",children:[]}],l={toc:c};function b(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"In this article we are going to explore a bit of the ZIO streams API and how it can be used to talk to a JMS broker. The ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://zio.dev/docs/resources/resources"}),"ZIO web site")," and ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/aparo/awesome-zio"}),"awesome-zio")," have a lot of very good articles and talks on ZIO streams covering the basics, so I won't repeat those here."),Object(i.b)("p",null,"For this article I have used an embedded ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://activemq.apache.org/"}),"ActiveMQ")," messaging broker, but the code makes no assumptions about the underlying JMS provider. Usually the JMS broker would run externally and we would use a provider specific connection factory to connect to it."),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"The complete source code used in this article can be found on ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/blended-zio/blended-zio/tree/main/blended.zio.streams"}),"github")))),Object(i.b)("h2",{id:"what-we-want-to-achieve"},"What we want to achieve"),Object(i.b)("p",null,"Let's start by considering what a simple program sending and receiving messages from an ActiveMQ broker would look like. That program should be runnable as normal ZIO app:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-scala"}),'  private val program: ZIO[ZEnv with AMQBroker.AMQBroker with Logging, Throwable, Unit] = for {\n    si <- ZIOJmsConnectionManager.Service.singleton\n    _  <- putStrLn("Starting JMS Broker") *> ZIO.service[BrokerService]\n    _  <- (for {\n            con <- connect(cf, "sample")\n            _   <- reconnect(con, Some(new Exception("Boom"))).schedule(Schedule.duration(10.seconds)).fork\n            _   <- for {\n                     c <- consumer(con).fork\n                     p <- producer(con).fork\n                     _ <- c.join\n                     _ <- p.join\n                   } yield ()\n          } yield ())\n            .provideSomeLayer[ZEnv with AMQBroker.AMQBroker with Logging](ZIOJmsConnectionManager.Service.live(si))\n  } yield ()\n')),Object(i.b)("p",null,"We can see from ",Object(i.b)("inlineCode",{parentName:"p"},"program"),"'s type that besides the ZIO environment ",Object(i.b)("inlineCode",{parentName:"p"},"ZEnv")," we will need an ActiveMQ message broker and also the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://zio.github.io/zio-logging/"}),"ZIO logging API")," to execute the program. With those requirements the program is fairly straightforward:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"aquire the message broker from the environment"),Object(i.b)("li",{parentName:"ol"},"create a connection factory to talk to the broker just started"),Object(i.b)("li",{parentName:"ol"},"create a fiber that simply sits in the background for 10 seconds"),Object(i.b)("li",{parentName:"ol"},"use the connection factory to establish a JMS connection"),Object(i.b)("li",{parentName:"ol"},"use the connection to kick off a sender and receiver"),Object(i.b)("li",{parentName:"ol"},"join with the timed fiber to interrupt the sender and receiver"),Object(i.b)("li",{parentName:"ol"},"clean up the connection")),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"The sample program has a scheduled ",Object(i.b)("inlineCode",{parentName:"p"},"reconnect")," after 10 seconds. This will cause the execution to fail with an exception because the underlying streams terminate with a ",Object(i.b)("inlineCode",{parentName:"p"},"JMSException"),". In one of the next articles I will get into stream recovery."))),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"I have specifically decided to perform the connection cleanup myself in this case. The API also has a ",Object(i.b)("inlineCode",{parentName:"p"},"managedConnection")," which would automatically call close for the connection. At the moment I am undecided what the better approach might be as in most of my use cases the connection is shared across many services within my applications."),Object(i.b)("p",{parentName:"div"},"That might mean the connection is going to end up in a layer within the environment."))),Object(i.b)("p",null,"We will dive into the various steps throughout the remainder of this article to see how ZIO is helping to provide a smooth access to JMS. First, let's see how we can run the program above:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-scala"}),"  override def run(args: List[String]): ZIO[ZEnv, Nothing, ExitCode] = program\n    .provideCustomLayer(combinedEnv)\n    .catchAllCause(c => putStrLn(c.prettyPrint))\n    .exitCode\n")),Object(i.b)("p",null,"As we can see, we need to provide the environment with all required services, so that the ",Object(i.b)("inlineCode",{parentName:"p"},"program")," can actually execute."),Object(i.b)("h2",{id:"constructing-the-environment"},"Constructing the Environment"),Object(i.b)("p",null,"First, we create a layer which consist of the standard ZIO environment enriched with the Slf4j implementation of the ",Object(i.b)("inlineCode",{parentName:"p"},"Logging")," service. This layer is required by the ActiveMQ service implementation and also by the program itself."),Object(i.b)("p",null,"Next we create the ActiveMQ service using vertical composition with the ",Object(i.b)("inlineCode",{parentName:"p"},"logEnv")," and also an instance if a ",Object(i.b)("inlineCode",{parentName:"p"},"ZIOJmsConnectionManager")," which we stick into the environment as well."),Object(i.b)("p",null,"Finally we can create the ",Object(i.b)("inlineCode",{parentName:"p"},"combinedEnv")," using horizontal composition of the logging, the broker layer and the connection manager layer."),Object(i.b)("p",null,"The resulting environments contains everything to run our program."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-scala"}),'  private val logEnv: ZLayer[Any, Nothing, ZEnv with Logging] =\n    ZEnv.live ++ Slf4jLogger.make((_, message) => message)\n\n  private val brokerEnv: ZLayer[Any, Throwable, AMQBroker.AMQBroker] =\n    logEnv >>> AMQBroker.simple("simple")\n\n  private val combinedEnv: ZLayer[ZEnv, Throwable, ZEnv with AMQBroker.AMQBroker with Logging] =\n    logEnv ++ brokerEnv\n')),Object(i.b)("p",null,"For reference, the Active MQ broker service is ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/blended-zio/blended-zio-activemq/blob/main/blended-zio-activemq/src/main/scala/blended/zio/activemq/AMQBroker.scala"}),"here"),"."),Object(i.b)("h2",{id:"sending-messages"},"Sending messages"),Object(i.b)("p",null,"To have some data travelling the message broker, let's start by creating a plain ZIO stream, which emits a String element every half second or so. Each element is simply the current time formatted using a ",Object(i.b)("inlineCode",{parentName:"p"},"SimpleDateFormat"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-scala"}),"  private val stream: ZStream[ZEnv, Nothing, String] = ZStream\n    .fromSchedule(Schedule.spaced(500.millis).jittered)\n    .mapM(_ =>\n      currentTime(TimeUnit.MILLISECONDS)\n        .map(sdf.format)\n    )\n")),Object(i.b)("p",null,"Now we want to send all these Strings to JMS and later on receive them."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-scala"}),"  private def producer(con: JmsConnection): ZIO[ZEnv with Logging, Throwable, Unit] =\n    createSession(con).use(session => createProducer(session).use(prod => stream.run(jmsSink(prod, testDest))))\n")),Object(i.b)("p",null,"The send is broken down into these steps:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"create the JMS session"),Object(i.b)("li",{parentName:"ol"},"create the JMS MessageProducer"),Object(i.b)("li",{parentName:"ol"},"use the producer to create a ZIO Sink"),Object(i.b)("li",{parentName:"ol"},"run the stream with the sink, so that the generated messages aresent to JMS")),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Within the JMS API we use a number of ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/blended-zio/blended-zio/blob/main/blended.zio.streams/src/main/scala/blended/zio/streams/jms/jmsobjects.scala"}),"case classes")," that are simple wrappers around the underlying JMS classes. Essentially these case classes some additional information besides the original object. For one, we kaap a reference of the instance that was used as a factory. I.e. the ",Object(i.b)("inlineCode",{parentName:"p"},"JmsSession")," has a reference to the connection it belongs to and a ",Object(i.b)("inlineCode",{parentName:"p"},"JmsConsumer")," a reference to the ",Object(i.b)("inlineCode",{parentName:"p"},"JmsSession")," it was created for."),Object(i.b)("p",{parentName:"div"},"Besides that all classes contain a human readable identifier, which is mainly used to produce a more readable log."))),Object(i.b)("p",null,"Having this in mind, we create a named JMS session as a ",Object(i.b)("inlineCode",{parentName:"p"},"ZManaged"),", so that ZIO takes care of closing the session after it has been used. Within the session we create a ",Object(i.b)("inlineCode",{parentName:"p"},"JmsProducer"),", which is again a ",Object(i.b)("inlineCode",{parentName:"p"},"ZManaged"),"."),Object(i.b)("p",null,"Note, that the producer does not actually ",Object(i.b)("em",{parentName:"p"},"produce")," the messages in the sense of JMS - it just has all the information to do so."),Object(i.b)("p",null,"So, let's have a look how we can define an effect using the poducer to actually send a message:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-scala"}),'  def send(\n    text: String,\n    prod: JmsProducer,\n    dest: JmsDestination\n  ): ZIO[ZEnv with Logging, JMSException, Unit] = (for {\n    msg <- effectBlocking(prod.session.session.createTextMessage(text))\n    d   <- dest.create(prod.session)\n    _   <- effectBlocking(prod.producer.send(d, msg))\n    _   <- log.debug(s"Message [$text] sent successfully with [$prod] to [${dest.asString}]")\n  } yield ()).flatMapError { t =>\n    log.warn(s"Error sending message with [$prod] to [$dest]: [${t.getMessage()}]") *> ZIO.succeed(t)\n  }.refineOrDie { case t: JMSException => t }\n')),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"use the producer's session to create the JMS ",Object(i.b)("inlineCode",{parentName:"li"},"Message")," object"),Object(i.b)("li",{parentName:"ol"},"use the producer's session to create the JMS ",Object(i.b)("inlineCode",{parentName:"li"},"Destination")," object"),Object(i.b)("li",{parentName:"ol"},"perform the JMS send"),Object(i.b)("li",{parentName:"ol"},"record the send in the log")),Object(i.b)("p",null,"Now that we have the effect sending a single message, we can easily create a sink. The ",Object(i.b)("inlineCode",{parentName:"p"},"ZSink")," object in the ZIO streams API has a ",Object(i.b)("inlineCode",{parentName:"p"},"foreach")," method, which allows us to create a sink from an effect:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-scala"}),"// in ZSink:\ndef foreach[R, E, I](f: I => ZIO[R, E, Any]): ZSink[R, E, I, I, Unit]\n")),Object(i.b)("p",null,"Let's take a moment to digest the signature: ",Object(i.b)("inlineCode",{parentName:"p"},"R")," and ",Object(i.b)("inlineCode",{parentName:"p"},"E")," is the usual type magic within ZIO to describe the environment required for the sink and the errors it may produce. ",Object(i.b)("inlineCode",{parentName:"p"},"Unit")," in that case means that the final result after running a Stream with this Sink is ",Object(i.b)("inlineCode",{parentName:"p"},"Unit"),". In other words, the Stream is just run for the effect passed in as a parameter."),Object(i.b)("p",null,"The function provided needs to create an effect for each element of type ",Object(i.b)("inlineCode",{parentName:"p"},"I"),"."),Object(i.b)("p",null,"In our case we already have the effect, which is the ",Object(i.b)("inlineCode",{parentName:"p"},"send")," method above, so we can define our sink as"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-scala"}),"  def jmsSink(\n    prod: JmsProducer,\n    dest: JmsDestination\n  ): ZSink[ZEnv with Logging, JMSException, String, String, Unit] =\n    ZSink.foreach[ZEnv with Logging, JMSException, String](s => send(s, prod, dest))\n")),Object(i.b)("h2",{id:"receiving-messages"},"Receiving messages"),Object(i.b)("p",null,"Now let's understand the ",Object(i.b)("inlineCode",{parentName:"p"},"consumer")," of our program:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-scala"}),"  private def consumer(con: JmsConnection): ZIO[ZEnv with Logging, Throwable, Unit] =\n    createSession(con).use { session =>\n      createConsumer(session, testDest).use { cons =>\n        jmsStream(cons).collect { case m: TextMessage => m.getText() }\n          .foreach(s => putStrLn(s))\n      }\n    }\n")),Object(i.b)("p",null,"Again, we need to create a ",Object(i.b)("inlineCode",{parentName:"p"},"JmsSession"),", but this time we use it to create a ",Object(i.b)("inlineCode",{parentName:"p"},"JmsConsumer")," for the given ",Object(i.b)("inlineCode",{parentName:"p"},"JmsDestination"),".\nWe then use the created consumer to create a ",Object(i.b)("inlineCode",{parentName:"p"},"ZStream[R, E, Message]"),", in other words a plain ",Object(i.b)("inlineCode",{parentName:"p"},"ZStream")," of JMS ",Object(i.b)("inlineCode",{parentName:"p"},"Message"),"objects. From that stream we collect all ",Object(i.b)("inlineCode",{parentName:"p"},"TextMessage")," instances, get the ",Object(i.b)("inlineCode",{parentName:"p"},"String")," body of those and print that to the console."),Object(i.b)("p",null,"Creating the stream is again amazingly simple with the ZIO streams API:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-scala"}),"  def jmsStream(cons: JmsConsumer): ZStream[ZEnv with Logging, JMSException, Message] =\n    ZStream.repeatEffect(receive(cons)).collect { case Some(s) => s }\n")),Object(i.b)("p",null,"We repeat an effect producing optional ",Object(i.b)("inlineCode",{parentName:"p"},"Message")," objects (optional because the underlying receive yields ",Object(i.b)("inlineCode",{parentName:"p"},"None")," if no message is available for the consumer). As we are only interested in the actual messages, we collect only the results actually having a ",Object(i.b)("inlineCode",{parentName:"p"},"Message"),"."),Object(i.b)("p",null,"The actual consume is simply a wrapper around the JMS API with some logging:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-scala"}),'  def receive(cons: JmsConsumer): ZIO[ZEnv with Logging, JMSException, Option[Message]] = (for {\n    msg <- effectBlocking(Option(cons.consumer.receiveNoWait()))\n    _   <- if (msg.isDefined) log.debug(s"Received [$msg] with [$cons]") else ZIO.unit\n  } yield msg).flatMapError { t =>\n    log.warn(s"Error receiving message with [$cons] : [${t.getMessage()}]") *> ZIO.succeed(t)\n  }.refineOrDie { case t: JMSException => t }\n')),Object(i.b)("h2",{id:"next-steps"},"Next steps"),Object(i.b)("p",null,"I have not elaborated too much on the ",Object(i.b)("inlineCode",{parentName:"p"},"SingleConnectionFactory"),". This is just a wrapper around a plain JMS ",Object(i.b)("inlineCode",{parentName:"p"},"ConnectionFactory")," and for the moment exposes the methods of the connection factory wrapped as effects. Other than the ",Object(i.b)("inlineCode",{parentName:"p"},"ConnectionFactory")," the ",Object(i.b)("inlineCode",{parentName:"p"},"SingleConnectionFactory")," caches a connection once it has been established and has an empty implementation for ",Object(i.b)("inlineCode",{parentName:"p"},"close"),". To really close the JMS connection, we must use ",Object(i.b)("inlineCode",{parentName:"p"},"shutdown")," as we have done in the program above."),Object(i.b)("p",null,"Next I will explore how to enhance the ",Object(i.b)("inlineCode",{parentName:"p"},"SingleConnectionFactory")," with some resilience. The idea here is to create ",Object(i.b)("em",{parentName:"p"},"self healing")," streams that would automatically reconnect after a connection has been lost."),Object(i.b)("p",null,"For now I have just used Strings as message objects; this will be enhanced to more flexible and useful messages."),Object(i.b)("h2",{id:"conclusion"},"Conclusion"),Object(i.b)("p",null,"With ZIO it is very straight forward to break down a given problem into smaller pieces and then use those as building blocks for the solution. The challenge for developer like me is to get the head around the signatures and how all the types play together."),Object(i.b)("p",null,"For example, building the environment took me a couple of hours to get it right. One has to take the time to read and understand the compiler errors. In the end I found that these errors pretty much tell me what I need to put together in terms of hirzontal and vertical composition to get it right."),Object(i.b)("p",null,"The first steps in some areas of ZIO require quite a bit of code study. Given that ZIO is just beyond it's first official release, the documentation and other resources are plenty, but scattered araound talks and blogs. The ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.zionomicon.com/"}),"upcoming book by John De Goes and Adam Fraser")," adresses a lot of that and already has a lot of content in it's alpha version."),Object(i.b)("p",null,"Even if it means stating the obvious: Also when you work with a more sophisticated API in ZIO in the inner layers you are going to find ZIO effects which you then combine into something else - in our case create ",Object(i.b)("inlineCode",{parentName:"p"},"ZStream")," and ",Object(i.b)("inlineCode",{parentName:"p"},"ZSink")," from plain ZIO's and then have the entire ZStream magic at the tip of your fingers to manipulate JMS streams."))}b.isMDXComponent=!0},113:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return h}));var a=n(0),o=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=o.a.createContext({}),b=function(e){var t=o.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=b(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,r=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=b(n),d=a,h=m["".concat(r,".").concat(d)]||m[d]||p[d]||i;return n?o.a.createElement(h,s(s({ref:t},l),{},{components:n})):o.a.createElement(h,s({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var l=2;l<i;l++)r[l]=n[l];return o.a.createElement.apply(null,r)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);