(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{114:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return l})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return m}));var a=t(3),i=t(7),r=(t(0),t(123)),o={slug:"zio-logging",title:"Use ZIO Logging",tags:["ZIO","Logging","Utilities"],author:"Andreas Gies",author_url:"https://github.com/atooni"},l={permalink:"/blended-zio/blog/zio-logging",source:"@site/blog/2020-09-28-ZIOLogging.md",description:"In this article we will investigate how we can leverage zio-logging in our service implementations while avoiding to add a logging service requirement to the business interfaces.",date:"2020-09-28T00:00:00.000Z",tags:[{label:"ZIO",permalink:"/blended-zio/blog/tags/zio"},{label:"Logging",permalink:"/blended-zio/blog/tags/logging"},{label:"Utilities",permalink:"/blended-zio/blog/tags/utilities"}],title:"Use ZIO Logging",truncated:!0,prevItem:{title:"ZIO Streams and JMS",permalink:"/blended-zio/blog/zio-streams-jms"}},c=[{value:"Keep business interfaces free from non-business requirements",id:"keep-business-interfaces-free-from-non-business-requirements",children:[]}],s={toc:c};function m(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"In this article we will investigate how we can leverage ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://zio.github.io/zio-logging/"}),"zio-logging")," in our service implementations while avoiding to add a logging service requirement to the business interfaces."),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"The complete source code used in this article can be found on ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/blended-zio/blended-zio/tree/main/blended.zio.jmx"}),"github")))),Object(r.b)("h2",{id:"keep-business-interfaces-free-from-non-business-requirements"},"Keep business interfaces free from non-business requirements"),Object(r.b)("p",null,"Within ",Object(r.b)("em",{parentName:"p"},"Blended ZIO")," the services are kept clean of non functional requirements such as relying on a logging service being present within the environment."),Object(r.b)("p",null,"For example, the ",Object(r.b)("inlineCode",{parentName:"p"},"Service")," within ",Object(r.b)("inlineCode",{parentName:"p"},"MBeanServerFacade")," is defined as follows."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-scala",metastring:'title="Service Definition"',title:'"Service','Definition"':!0}),"  trait Service {\n\n    /**\n     * Retrieve the information for a MBean by it's object name. Any JMX related information will be\n     * passed to the error channel without modification. If successful, A [[JmxBeanInfo]] will be\n     * returned.\n     */\n    def mbeanInfo(objName: JmxObjectName): ZIO[Any, Throwable, JmxBeanInfo]\n\n    /**\n     * Retrieve the list of all MBeanNames known to the underlying MBean Server.\n     * Any JMX exception that might occur will be passed onwards in the error\n     * channel. If successful, a list of [[JmxObjectName]]s will be returned.\n     */\n    def allMbeanNames(): ZIO[Any, Throwable, List[JmxObjectName]] = mbeanNames(None)\n\n    /**\n     * Retrieve the list of all object names know to the underlying MBean Server.\n     * Any JMX exception that might occur will be passed onwards in the error\n     * channel. If successful, a list of [[JmxObjectName]]s will be returned.\n     * @param objName If non-empty, the result will contain all object names that\n     *                are in the same JMX domain and have all properties set within\n     *                the parameter as additional name properties.\n     *                If empty, no filtering will be applied.\n     */\n    def mbeanNames(objName: Option[JmxObjectName]): ZIO[Any, Throwable, List[JmxObjectName]]\n  }\n")),Object(r.b)("p",null,"However, within the service's implementation ",Object(r.b)("inlineCode",{parentName:"p"},"JvmMBeanServerFacade")," the corresponding methods leverage the API of ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://zio.github.io/zio-logging/"}),"zio-logging")," to produce some output while executing the effects."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-scala",metastring:'title="Sample implementation"',title:'"Sample','implementation"':!0}),'  def mbeanInfo(objName: JmxObjectName): ZIO[Logging, Throwable, JmxBeanInfo] = for {\n    on           <- ZIO.effect(new ObjectName(objName.objectName))\n    _            <- doLog(LogLevel.Info)(s"Getting MBeanInfo [$objName]")\n    info          = svr.getMBeanInfo(on)\n    readableAttrs = info.getAttributes.filter(_.isReadable())\n    mapped       <- mapAllAttributes(on, readableAttrs)\n    result        = JmxBeanInfo(objName, mapped)\n  } yield result\n\n  private def doLog(level: LogLevel)(msg: => String): ZIO[Logging, Nothing, Unit] = for {\n    _ <- log.locally(LogAnnotation.Name(getClass.getName :: Nil)) {\n           log(level)(msg)\n         }\n  } yield ()\n')),Object(r.b)("p",null,"So, when we assemble the service"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"we need to provide a Logging service when building up the ZLayer"),Object(r.b)("li",{parentName:"ul"},"we need to make the Logging service available to the service implementation"),Object(r.b)("li",{parentName:"ul"},"the business service as such should not have any knowledge of the Logging service requirement")),Object(r.b)("p",null,"The code to construct the live service which requires ",Object(r.b)("inlineCode",{parentName:"p"},"Logging")," leverages ",Object(r.b)("inlineCode",{parentName:"p"},"ZLayer.fromFunction"),". We see that a ",Object(r.b)("inlineCode",{parentName:"p"},"Logging")," service is required within the environment and we can use the parameter to the ",Object(r.b)("inlineCode",{parentName:"p"},"fromFunction")," call in the ",Object(r.b)("inlineCode",{parentName:"p"},"provide")," operator so that the requirement of having a ",Object(r.b)("inlineCode",{parentName:"p"},"Logging")," service is eliminated and the sole business service interface remains."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-scala",metastring:'title="Layer definition"',title:'"Layer','definition"':!0}),"  val live: ZLayer[Logging, Nothing, MBeanServerFacade] = ZLayer.fromFunction(log =>\n    new Service {\n      private val impl: JvmMBeanServerFacade = new JvmMBeanServerFacade(ManagementFactory.getPlatformMBeanServer)\n\n      override def mbeanInfo(objName: JmxObjectName): ZIO[Any, Throwable, JmxBeanInfo] =\n        impl.mbeanInfo(objName).provide(log)\n\n      override def mbeanNames(objName: Option[JmxObjectName]): ZIO[Any, Throwable, List[JmxObjectName]] =\n        impl.mbeanNames(objName).provide(log)\n    }\n  )\n")),Object(r.b)("p",null,"We might have other service implementations that do not require logging or use a different logging API while keeping the same business interface."),Object(r.b)("p",null,"Finally, we can construct the environment for our program as we do in the test case:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-scala",metastring:'title="Layer creation"',title:'"Layer','creation"':!0}),"  private val logSlf4j = Slf4jLogger.make((_, message) => message)\n\n  private val mbeanLayer: ZLayer[Any, Nothing, MBeanServerFacade.MBeanServerFacade] =\n    logSlf4j >>> MBeanServerFacade.live\n")))}m.isMDXComponent=!0},123:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return u}));var a=t(0),i=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=i.a.createContext({}),m=function(e){var n=i.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},b=function(e){var n=m(e.components);return i.a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},g=i.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),b=m(t),g=a,u=b["".concat(o,".").concat(g)]||b[g]||p[g]||r;return t?i.a.createElement(u,l(l({ref:n},s),{},{components:t})):i.a.createElement(u,l({ref:n},s))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=g;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<r;s++)o[s]=t[s];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,t)}g.displayName="MDXCreateElement"}}]);