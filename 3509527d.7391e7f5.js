(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{113:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=i.a.createContext({}),b=function(e){var t=i.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=b(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},m=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=b(n),m=a,h=p["".concat(o,".").concat(m)]||p[m]||d[m]||r;return n?i.a.createElement(h,c(c({ref:t},l),{},{components:n})):i.a.createElement(h,c({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<r;l++)o[l]=n[l];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},83:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return b}));var a=n(3),i=n(7),r=(n(0),n(113)),o={id:"container",title:"Service based containers"},c={unversionedId:"container",id:"container",isDocsHomePage:!1,title:"Service based containers",description:"A JVM executing a blended application will be referenced to as a blended container. When blended was started in it's first version, it has been a Java application running inside a J2EE server, which everyone referred to as a container. Over time blended has evolved to a stand-alone Scala application on top of OSGi, but the term container has stuck.",source:"@site/docs/container.md",slug:"/container",permalink:"/blended-zio/docs/container",version:"current",sidebar:"someSidebar",previous:{title:"Blended Use Cases",permalink:"/blended-zio/docs/"},next:{title:"Blended ZIO Core",permalink:"/blended-zio/docs/core/index"}},s=[{value:"Container types",id:"container-types",children:[]},{value:"Container deployment",id:"container-deployment",children:[]},{value:"Container directory structure",id:"container-directory-structure",children:[]},{value:"Deployment automation",id:"deployment-automation",children:[]}],l={toc:s};function b(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"A JVM executing a blended application will be referenced to as a ",Object(r.b)("em",{parentName:"p"},"blended container"),". When ",Object(r.b)("em",{parentName:"p"},"blended")," was started in it's first version, it has been a Java application running inside a J2EE server, which everyone referred to as a container. Over time ",Object(r.b)("em",{parentName:"p"},"blended")," has evolved to a stand-alone Scala application on top of OSGi, but the term ",Object(r.b)("em",{parentName:"p"},"container")," has stuck."),Object(r.b)("p",null,"A typical ",Object(r.b)("em",{parentName:"p"},"blended environment")," consists of several ",Object(r.b)("em",{parentName:"p"},"blended containers")," distributed across geographical regions throughout the enterprise and the core use case for a ",Object(r.b)("em",{parentName:"p"},"blended environment")," is to provide a communication backbone across the enterprise for other applications. As such ",Object(r.b)("em",{parentName:"p"},"blended")," is the layer to realize enterprise level deployment policies such as enforcing security, connection management and general message routing."),Object(r.b)("p",null,"To achieve this, ",Object(r.b)("em",{parentName:"p"},"blended")," makes use of other enterprise applications such as messaging backbones, the PKI infrastructure and others. Every access to an external application is realized within a module and exposed to other modules only in terms of service interfaces, so that a change in the implementation has only minimal impact. In essence, one could say that blended consists of layered services running within the same JVM."),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"For example, within ",Object(r.b)("em",{parentName:"p"},"Blended 3")," the JMS connectivity is realized as a service which is offered to other modules with the ",Object(r.b)("inlineCode",{parentName:"p"},"ConnectionFactory")," interface defined in the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://download.oracle.com/otndocs/jcp/7195-jms-1.1-fr-spec-oth-JSpec/"}),"JMS specification"),". Under the covers the implementation uses a keep alive mechanism to ensure that JMS connections are alive and operational."),Object(r.b)("p",{parentName:"div"},"Another example is a ",Object(r.b)("inlineCode",{parentName:"p"},"CertificateManager")," managing the key- and trust-store of a ",Object(r.b)("em",{parentName:"p"},"blended container"),". Within ",Object(r.b)("em",{parentName:"p"},"Blended 3"),", an implementation with self signed certificates and another based on the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Simple_Certificate_Enrollment_Protocol"}),Object(r.b)("inlineCode",{parentName:"a"},"SCEP")," protocol")," to provision certificates exist. These certificates are used by the ",Object(r.b)("inlineCode",{parentName:"p"},"SSLContext")," service, which is in turn used by all modules that need to offer a SSL based server socket."))),Object(r.b)("h2",{id:"container-types"},"Container types"),Object(r.b)("p",null,"Within a blended environment several ",Object(r.b)("strong",{parentName:"p"},"container types")," might exist. Each container type is defined by the services that are configured for that particular container. As a general rule, two containers of the same type differ from each other ",Object(r.b)("strong",{parentName:"p"},"only")," within their configuration."),Object(r.b)("h2",{id:"container-deployment"},"Container deployment"),Object(r.b)("p",null,"A container deployment consists of the jar files with the services and their implementations and the configuration files."),Object(r.b)("p",null,"Within ",Object(r.b)("em",{parentName:"p"},"Blended 3")," it has proven to be a best practice that the configuration files should be kept identical across all container types within a blended environment. To achieve that, the configuration files should allow to define placeholders that can be filled in at runtime. All differences between two containers of the same type are exclusively realized by having different values within the environment variables referenced in the config files."),Object(r.b)("p",null,"For example, the configuration for a LDAP service might look like:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  url             : "ldaps://ldap.$[[env]].$[[country]]:4712"\n  systemUser"     : "admin"\n  systemPassword" : "$[(encrypted)[5c4e48e1920836f68f1abbaf60e9b026]]"\n  userBase"       : "o=employee"\n  userAttribute"  : "uid"\n  groupBase"      : "ou=sib,ou=apps,o=global"\n  groupAttribute" : "cn"\n  groupSearch"    : "(member={0})"\n}\n')),Object(r.b)("p",null,"In this example, two environment variables - ",Object(r.b)("inlineCode",{parentName:"p"},"env")," and ",Object(r.b)("inlineCode",{parentName:"p"},"country")," - are required to resolve the LDAP url. In terms of service we need"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"a crypto service to decrypt encrypted config values"),Object(r.b)("li",{parentName:"ul"},"an evaluation service to resolve config expressions that might occur in config files")),Object(r.b)("p",null,"These services can than be used by ",Object(r.b)("strong",{parentName:"p"},"all")," modules that need to be configured."),Object(r.b)("h2",{id:"container-directory-structure"},"Container directory structure"),Object(r.b)("p",null,"A container should be deployable to a target machine simply by extracting an archive to a directory - the ",Object(r.b)("inlineCode",{parentName:"p"},"BLENDED_HOME"),". Within ",Object(r.b)("inlineCode",{parentName:"p"},"BLENDED_HOME")," all libraries are deployed within the ",Object(r.b)("inlineCode",{parentName:"p"},"lib")," sub directory, all configuration files shall be within the ",Object(r.b)("inlineCode",{parentName:"p"},"etc")," sub directory. If modules require storage on the file system, this storage should be beneath ",Object(r.b)("inlineCode",{parentName:"p"},"BLENDED_HOME")," as well."),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"For example, some containers contain an embedded ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://activemq.apache.org"}),"ActiveMQ")," broker, which requires a data directory."))),Object(r.b)("h2",{id:"deployment-automation"},"Deployment automation"),Object(r.b)("p",null,"If containers of the same type are identical in terms of their libraries and configuration files and only differ within their environment variables, it is very easy to automate the deployment by different means:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://www.docker.com/"}),"Docker")," images can be defined around the deployment archive and the environment variables are the configuration points to instantiate a docker container."),Object(r.b)("li",{parentName:"ul"},"A ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://kubernetes.io/"}),"Kubernetes")," deployment consisting of several ",Object(r.b)("em",{parentName:"li"},"blended containers")," - potentially of different types can be defined on top og the docker images simply by templating the injection of the environment variables."),Object(r.b)("li",{parentName:"ul"},"Deployment to physical machines can be realized by tools such as ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://www.ansible.com/"}),"Ansible")," simply by extracting the deployment archive to the target machine and then use a templating mechanism to create a script exposing the required environment variables.")),Object(r.b)("p",null,"The creation of docker images can and should be automated within the build environment."))}b.isMDXComponent=!0}}]);